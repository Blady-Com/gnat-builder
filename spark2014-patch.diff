diff --git a/src/flow/flow-analysis.adb b/src/flow/flow-analysis.adb
index e89bf8b4..6698cbd7 100644
--- a/src/flow/flow-analysis.adb
+++ b/src/flow/flow-analysis.adb
@@ -5240,11 +5240,10 @@ procedure Report_Erroneous_Volatility is
          --  type for reading.
 
          Volatile_Effect_Found :=
-            (for some F of Globals.Proof_Ins => Is_Volatile_For_Reading (F))
-            or else
-             (for some F of Globals.Inputs => Is_Volatile_For_Reading (F))
+            (for some F of Globals.Proof_Ins => Is_Volatile (F))
+            or else (for some F of Globals.Inputs => Is_Volatile (F))
             or else (for some F of Get_Explicit_Formals (FA.Spec_Entity)
-                       => Is_Effectively_Volatile_For_Reading (Etype (F)));
+                       => Is_Effectively_Volatile (Etype (F)));
 
          pragma Assert (Globals.Outputs.Is_Empty);
       end;
diff --git a/src/spark/spark_definition.adb b/src/spark/spark_definition.adb
index e20f36e1..35519a99 100644
--- a/src/spark/spark_definition.adb
+++ b/src/spark/spark_definition.adb
@@ -3158,7 +3158,7 @@ procedure Mark_Param
          --  Special checks for effectively volatile calls and objects
          if Comes_From_Source (Actual)
            and then
-             (Is_Effectively_Volatile_Object_For_Reading (Actual)
+             (Is_Effectively_Volatile_Object (Actual)
               or else (Nkind (Actual) = N_Function_Call
                        and then Nkind (Name (Actual)) /= N_Explicit_Dereference
                          and then Is_Volatile_Call (Actual))
@@ -3169,7 +3169,7 @@ procedure Mark_Param
             --  type (SPARK RM 7.1.3(10)).
 
             if not Is_Scalar_Type (Etype (Formal))
-              and then Is_Effectively_Volatile_For_Reading (Etype (Formal))
+              and then Is_Effectively_Volatile (Etype (Formal))
             then
                null;
 
@@ -3964,9 +3964,7 @@ procedure Mark_Object_Entity (E : Entity_Id) is
          --  rule is checked by the frontend for code with SPARK_Mode On, but
          --  needs to be checked here for code with SPARK_Mode Auto.
 
-         if Ekind (E) = E_Constant
-           and then Is_Effectively_Volatile_For_Reading (T)
-         then
+         if Ekind (E) = E_Constant and then Is_Effectively_Volatile (T) then
             Mark_Violation ("volatile constant", Def);
          end if;
 
@@ -4266,7 +4264,7 @@ procedure Mark_Function_Specification (Id : Entity_Id) is
             --  effectively volatile type (SPARK RM 7.1.3(9)).
 
             if not Is_Volatile_Func
-              and then Is_Effectively_Volatile_For_Reading (Etype (Id))
+              and then Is_Effectively_Volatile (Etype (Id))
             then
                Mark_Violation
                  ("nonvolatile function with effectively volatile result", Id);
@@ -4299,7 +4297,7 @@ procedure Mark_Function_Specification (Id : Entity_Id) is
                if not Is_Volatile_Func
                  and then (Ekind (Id) /= E_Function
                            or else not Is_Predicate_Function (Id))
-                 and then Is_Effectively_Volatile_For_Reading (Etype (Formal))
+                 and then Is_Effectively_Volatile (Etype (Formal))
                then
                   Mark_Violation
                     ("nonvolatile function with effectively volatile " &
@@ -5131,7 +5129,7 @@ function Is_Private_Entity_Mode_Off (E : Entity_Id) return Boolean is
                  ("type invariant on private_type_declaration or"
                   & " private_type_extension", E, "SPARK RM 7.3.2(2)");
 
-            elsif Is_Effectively_Volatile_For_Reading (E) then
+            elsif Is_Effectively_Volatile (E) then
                Mark_Violation
                  ("type invariant on effectively volatile type",
                   E, "SPARK RM 7.3.2(4)");
@@ -5221,10 +5219,10 @@ function Is_Private_Entity_Mode_Off (E : Entity_Id) return Boolean is
          --  parent whose full view is not in SPARK.
 
          if Has_Predicates (E)
-           and then Is_Effectively_Volatile_For_Reading (E)
+           and then Is_Effectively_Volatile (E)
          then
             Mark_Violation
-              ("subtype predicate on effectively volatile type for reading",
+              ("subtype predicate on effectively volatile type",
                E, "SPARK RM 3.2.4(3)");
          end if;
 
@@ -7325,6 +7323,7 @@ procedure Insert_All_And_SPARK (E : Entity_Id) is
          S_Integer             => True,
          S_Long_Integer        => True,
          S_Long_Long_Integer   => True,
+         S_Long_Long_Long_Integer   => True,
 
          S_Natural             => True,
          S_Positive            => True,
